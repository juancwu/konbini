// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: partial_tokens.sql

package db

import (
	"context"
)

const deletePartialTokenById = `-- name: DeletePartialTokenById :exec
DELETE FROM partial_tokens WHERE id = ?
`

func (q *Queries) DeletePartialTokenById(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deletePartialTokenById, id)
	return err
}

const deleteUserPartialTokens = `-- name: DeleteUserPartialTokens :exec
DELETE FROM partial_tokens WHERE user_id = ?
`

func (q *Queries) DeleteUserPartialTokens(ctx context.Context, userID string) error {
	_, err := q.db.ExecContext(ctx, deleteUserPartialTokens, userID)
	return err
}

const getPartialTokenById = `-- name: GetPartialTokenById :one
SELECT
    id,
    user_id,
    created_at,
    updated_at,
    expires_at
FROM partial_tokens
WHERE id = ?
`

func (q *Queries) GetPartialTokenById(ctx context.Context, id string) (PartialToken, error) {
	row := q.db.QueryRowContext(ctx, getPartialTokenById, id)
	var i PartialToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const getUserPartialTokens = `-- name: GetUserPartialTokens :many
SELECT
    id,
    user_id,
    created_at,
    updated_at,
    expires_at
FROM partial_tokens
WHERE user_id = ?
`

func (q *Queries) GetUserPartialTokens(ctx context.Context, userID string) ([]PartialToken, error) {
	rows, err := q.db.QueryContext(ctx, getUserPartialTokens, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PartialToken
	for rows.Next() {
		var i PartialToken
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ExpiresAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const newPartialToken = `-- name: NewPartialToken :one
INSERT INTO partial_tokens
(user_id, created_at, updated_at, expires_at)
VALUES
(?, ?, ?, ?)
RETURNING id
`

type NewPartialTokenParams struct {
	UserID    string
	CreatedAt string
	UpdatedAt string
	ExpiresAt interface{}
}

func (q *Queries) NewPartialToken(ctx context.Context, arg NewPartialTokenParams) (string, error) {
	row := q.db.QueryRowContext(ctx, newPartialToken,
		arg.UserID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.ExpiresAt,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}
