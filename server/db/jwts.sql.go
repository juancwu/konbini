// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: jwts.sql

package db

import (
	"context"
)

const deletJwtById = `-- name: DeletJwtById :exec
DELETE FROM jwts WHERE id = ?
`

func (q *Queries) DeletJwtById(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deletJwtById, id)
	return err
}

const deleteUserJwts = `-- name: DeleteUserJwts :exec
DELETE FROM jwts WHERE user_id = ?
`

func (q *Queries) DeleteUserJwts(ctx context.Context, userID string) error {
	_, err := q.db.ExecContext(ctx, deleteUserJwts, userID)
	return err
}

const existsJwtById = `-- name: ExistsJwtById :one
SELECT EXISTS(SELECT 1 FROM jwts WHERE id = ?)
`

func (q *Queries) ExistsJwtById(ctx context.Context, id string) (int64, error) {
	row := q.db.QueryRowContext(ctx, existsJwtById, id)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}

const getJwtById = `-- name: GetJwtById :one
SELECT id, user_id, created_at, expires_at, token_type FROM jwts
WHERE id = ?
`

func (q *Queries) GetJwtById(ctx context.Context, id string) (Jwt, error) {
	row := q.db.QueryRowContext(ctx, getJwtById, id)
	var i Jwt
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.TokenType,
	)
	return i, err
}

const getUserJwts = `-- name: GetUserJwts :many
SELECT id, user_id, created_at, expires_at, token_type FROM jwts
WHERE user_id = ?
`

func (q *Queries) GetUserJwts(ctx context.Context, userID string) ([]Jwt, error) {
	rows, err := q.db.QueryContext(ctx, getUserJwts, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Jwt
	for rows.Next() {
		var i Jwt
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CreatedAt,
			&i.ExpiresAt,
			&i.TokenType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const newJWT = `-- name: NewJWT :one
INSERT INTO jwts
(user_id, created_at, expires_at, token_type)
VALUES
(?, ?, ?, ?)
RETURNING id, user_id, created_at, expires_at, token_type
`

type NewJWTParams struct {
	UserID    string
	CreatedAt string
	ExpiresAt string
	TokenType string
}

func (q *Queries) NewJWT(ctx context.Context, arg NewJWTParams) (Jwt, error) {
	row := q.db.QueryRowContext(ctx, newJWT,
		arg.UserID,
		arg.CreatedAt,
		arg.ExpiresAt,
		arg.TokenType,
	)
	var i Jwt
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.TokenType,
	)
	return i, err
}
