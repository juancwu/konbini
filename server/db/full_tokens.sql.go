// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: full_tokens.sql

package db

import (
	"context"
)

const deleteFullTokenById = `-- name: DeleteFullTokenById :exec
DELETE FROM full_tokens WHERE id = ?
`

func (q *Queries) DeleteFullTokenById(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteFullTokenById, id)
	return err
}

const deleteUserFullTokens = `-- name: DeleteUserFullTokens :exec
DELETE FROM full_tokens WHERE user_id = ?
`

func (q *Queries) DeleteUserFullTokens(ctx context.Context, userID string) error {
	_, err := q.db.ExecContext(ctx, deleteUserFullTokens, userID)
	return err
}

const getFullTokenById = `-- name: GetFullTokenById :one
SELECT
    id,
    user_id,
    created_at,
    updated_at,
    expires_at
FROM full_tokens
WHERE id = ?
`

func (q *Queries) GetFullTokenById(ctx context.Context, id string) (FullToken, error) {
	row := q.db.QueryRowContext(ctx, getFullTokenById, id)
	var i FullToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const getUserFullTokens = `-- name: GetUserFullTokens :many
SELECT
    id,
    user_id,
    created_at,
    updated_at,
    expires_at
FROM full_tokens
WHERE user_id = ?
`

func (q *Queries) GetUserFullTokens(ctx context.Context, userID string) ([]FullToken, error) {
	rows, err := q.db.QueryContext(ctx, getUserFullTokens, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FullToken
	for rows.Next() {
		var i FullToken
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ExpiresAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const newFullToken = `-- name: NewFullToken :one
INSERT INTO full_tokens
(user_id, created_at, updated_at, expires_at)
VALUES
(?, ?, ?, ?)
RETURNING id
`

type NewFullTokenParams struct {
	UserID    string
	CreatedAt string
	UpdatedAt string
	ExpiresAt string
}

func (q *Queries) NewFullToken(ctx context.Context, arg NewFullTokenParams) (string, error) {
	row := q.db.QueryRowContext(ctx, newFullToken,
		arg.UserID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.ExpiresAt,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}
