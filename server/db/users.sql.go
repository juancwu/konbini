// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users
(email, password, nickname, created_at, updated_at)
VALUES
(?, ?, ?, ?, ?)
RETURNING id
`

type CreateUserParams struct {
	Email     string
	Password  string
	Nickname  string
	CreatedAt string
	UpdatedAt string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (string, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Email,
		arg.Password,
		arg.Nickname,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}

const deleteUserById = `-- name: DeleteUserById :exec
DELETE FROM users WHERE id = ?
`

func (q *Queries) DeleteUserById(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteUserById, id)
	return err
}

const existsUserWithEmail = `-- name: ExistsUserWithEmail :one
SELECT EXISTS(SELECT 1 FROM users WHERE email = ?)
`

func (q *Queries) ExistsUserWithEmail(ctx context.Context, email string) (int64, error) {
	row := q.db.QueryRowContext(ctx, existsUserWithEmail, email)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT
    id,
    email,
    email_verified,
    password,
    nickname,
    totp_secret,
    created_at,
    updated_at
FROM users
WHERE email = ?
`

type GetUserByEmailRow struct {
	ID            string
	Email         string
	EmailVerified bool
	Password      string
	Nickname      string
	TotpSecret    sql.NullString
	CreatedAt     string
	UpdatedAt     string
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.EmailVerified,
		&i.Password,
		&i.Nickname,
		&i.TotpSecret,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const setUserEmailVerifiedStatus = `-- name: SetUserEmailVerifiedStatus :exec
UPDATE users SET email_verified = ? WHERE id = ?
`

type SetUserEmailVerifiedStatusParams struct {
	EmailVerified bool
	ID            string
}

func (q *Queries) SetUserEmailVerifiedStatus(ctx context.Context, arg SetUserEmailVerifiedStatusParams) error {
	_, err := q.db.ExecContext(ctx, setUserEmailVerifiedStatus, arg.EmailVerified, arg.ID)
	return err
}
