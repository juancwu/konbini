// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users
(email, password, nickname, created_at, updated_at)
VALUES
(?, ?, ?, ?, ?)
RETURNING id
`

type CreateUserParams struct {
	Email     string `db:"email" json:"email"`
	Password  string `db:"password" json:"password"`
	Nickname  string `db:"nickname" json:"nickname"`
	CreatedAt string `db:"created_at" json:"created_at"`
	UpdatedAt string `db:"updated_at" json:"updated_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (string, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Email,
		arg.Password,
		arg.Nickname,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}

const deleteUserById = `-- name: DeleteUserById :exec
DELETE FROM users WHERE id = ?
`

func (q *Queries) DeleteUserById(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteUserById, id)
	return err
}

const existsUserWithEmail = `-- name: ExistsUserWithEmail :one
SELECT EXISTS(SELECT 1 FROM users WHERE email = ?)
`

func (q *Queries) ExistsUserWithEmail(ctx context.Context, email string) (int64, error) {
	row := q.db.QueryRowContext(ctx, existsUserWithEmail, email)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password, nickname, email_verified, totp_secret, totp_locked, created_at, updated_at FROM users
WHERE email = ?
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Nickname,
		&i.EmailVerified,
		&i.TotpSecret,
		&i.TotpLocked,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, email, password, nickname, email_verified, totp_secret, totp_locked, created_at, updated_at FROM users
WHERE id = ?
`

func (q *Queries) GetUserById(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Nickname,
		&i.EmailVerified,
		&i.TotpSecret,
		&i.TotpLocked,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const isUserEmailVerified = `-- name: IsUserEmailVerified :one
SELECT email_verified FROM users WHERE id = ?
`

func (q *Queries) IsUserEmailVerified(ctx context.Context, id string) (bool, error) {
	row := q.db.QueryRowContext(ctx, isUserEmailVerified, id)
	var email_verified bool
	err := row.Scan(&email_verified)
	return email_verified, err
}

const lockUserTOTP = `-- name: LockUserTOTP :exec
UPDATE users SET
totp_locked = true,
updated_at = ?
WHERE id = ?
`

type LockUserTOTPParams struct {
	UpdatedAt string `db:"updated_at" json:"updated_at"`
	ID        string `db:"id" json:"id"`
}

func (q *Queries) LockUserTOTP(ctx context.Context, arg LockUserTOTPParams) error {
	_, err := q.db.ExecContext(ctx, lockUserTOTP, arg.UpdatedAt, arg.ID)
	return err
}

const removeUserTOTPSecret = `-- name: RemoveUserTOTPSecret :exec
UPDATE users SET
totp_secret = NULL,
totp_locked = false,
updated_at = ?
WHERE id = ?
`

type RemoveUserTOTPSecretParams struct {
	UpdatedAt string `db:"updated_at" json:"updated_at"`
	ID        string `db:"id" json:"id"`
}

func (q *Queries) RemoveUserTOTPSecret(ctx context.Context, arg RemoveUserTOTPSecretParams) error {
	_, err := q.db.ExecContext(ctx, removeUserTOTPSecret, arg.UpdatedAt, arg.ID)
	return err
}

const setUserEmailVerifiedStatus = `-- name: SetUserEmailVerifiedStatus :exec
UPDATE users SET email_verified = ?, updated_at = ? WHERE id = ?
`

type SetUserEmailVerifiedStatusParams struct {
	EmailVerified bool   `db:"email_verified" json:"email_verified"`
	UpdatedAt     string `db:"updated_at" json:"updated_at"`
	ID            string `db:"id" json:"id"`
}

func (q *Queries) SetUserEmailVerifiedStatus(ctx context.Context, arg SetUserEmailVerifiedStatusParams) error {
	_, err := q.db.ExecContext(ctx, setUserEmailVerifiedStatus, arg.EmailVerified, arg.UpdatedAt, arg.ID)
	return err
}

const setUserTOTPSecret = `-- name: SetUserTOTPSecret :exec
UPDATE users SET
totp_secret = ?,
updated_at = ?
WHERE id = ?
`

type SetUserTOTPSecretParams struct {
	TotpSecret *string `db:"totp_secret" json:"totp_secret"`
	UpdatedAt  string  `db:"updated_at" json:"updated_at"`
	ID         string  `db:"id" json:"id"`
}

func (q *Queries) SetUserTOTPSecret(ctx context.Context, arg SetUserTOTPSecretParams) error {
	_, err := q.db.ExecContext(ctx, setUserTOTPSecret, arg.TotpSecret, arg.UpdatedAt, arg.ID)
	return err
}
