// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: bentos.sql

package db

import (
	"context"
)

const addIngredientToBento = `-- name: AddIngredientToBento :exec
INSERT INTO bento_ingredients (bento_id, name, value, created_at, updated_at)
VALUES (?, ?, ?, ?, ?)
`

type AddIngredientToBentoParams struct {
	BentoID   string `db:"bento_id" json:"bento_id"`
	Name      string `db:"name" json:"name"`
	Value     []byte `db:"value" json:"value"`
	CreatedAt string `db:"created_at" json:"created_at"`
	UpdatedAt string `db:"updated_at" json:"updated_at"`
}

func (q *Queries) AddIngredientToBento(ctx context.Context, arg AddIngredientToBentoParams) error {
	_, err := q.db.ExecContext(ctx, addIngredientToBento,
		arg.BentoID,
		arg.Name,
		arg.Value,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const existsBentoWithNameOwnedByUser = `-- name: ExistsBentoWithNameOwnedByUser :one
SELECT EXISTS(SELECT 1 FROM bentos WHERE name = ? AND user_id = ?)
`

type ExistsBentoWithNameOwnedByUserParams struct {
	Name   string `db:"name" json:"name"`
	UserID string `db:"user_id" json:"user_id"`
}

func (q *Queries) ExistsBentoWithNameOwnedByUser(ctx context.Context, arg ExistsBentoWithNameOwnedByUserParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, existsBentoWithNameOwnedByUser, arg.Name, arg.UserID)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}

const getBentoByIDWithPermissions = `-- name: GetBentoByIDWithPermissions :one
SELECT b.id, b.user_id, b.name, b.created_at, b.updated_at, p.bytes FROM bentos b
LEFT JOIN bento_permissions p ON p.user_id = ? AND p.bento_id = b.id
WHERE b.id = ?
`

type GetBentoByIDWithPermissionsParams struct {
	UserID string `db:"user_id" json:"user_id"`
	ID     string `db:"id" json:"id"`
}

type GetBentoByIDWithPermissionsRow struct {
	ID        string `db:"id" json:"id"`
	UserID    string `db:"user_id" json:"user_id"`
	Name      string `db:"name" json:"name"`
	CreatedAt string `db:"created_at" json:"created_at"`
	UpdatedAt string `db:"updated_at" json:"updated_at"`
	Bytes     []byte `db:"bytes" json:"bytes"`
}

func (q *Queries) GetBentoByIDWithPermissions(ctx context.Context, arg GetBentoByIDWithPermissionsParams) (GetBentoByIDWithPermissionsRow, error) {
	row := q.db.QueryRowContext(ctx, getBentoByIDWithPermissions, arg.UserID, arg.ID)
	var i GetBentoByIDWithPermissionsRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Bytes,
	)
	return i, err
}

const getBentoIngredientIDsInBento = `-- name: GetBentoIngredientIDsInBento :many
SELECT id FROM bento_ingredients WHERE bento_id = ?
`

func (q *Queries) GetBentoIngredientIDsInBento(ctx context.Context, bentoID string) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getBentoIngredientIDsInBento, bentoID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBentoIngredients = `-- name: GetBentoIngredients :many
SELECT id, name, CAST(value AS TEXT) FROM bento_ingredients
WHERE bento_id = ?
`

type GetBentoIngredientsRow struct {
	ID    string `db:"id" json:"id"`
	Name  string `db:"name" json:"name"`
	Value string `db:"value" json:"value"`
}

func (q *Queries) GetBentoIngredients(ctx context.Context, bentoID string) ([]GetBentoIngredientsRow, error) {
	rows, err := q.db.QueryContext(ctx, getBentoIngredients, bentoID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBentoIngredientsRow
	for rows.Next() {
		var i GetBentoIngredientsRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Value); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBentoWithIDOwnedByUser = `-- name: GetBentoWithIDOwnedByUser :one
SELECT id, user_id, name, created_at, updated_at FROM bentos WHERE id = ? AND user_id = ?
`

type GetBentoWithIDOwnedByUserParams struct {
	ID     string `db:"id" json:"id"`
	UserID string `db:"user_id" json:"user_id"`
}

func (q *Queries) GetBentoWithIDOwnedByUser(ctx context.Context, arg GetBentoWithIDOwnedByUserParams) (Bento, error) {
	row := q.db.QueryRowContext(ctx, getBentoWithIDOwnedByUser, arg.ID, arg.UserID)
	var i Bento
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listBentosWithAccess = `-- name: ListBentosWithAccess :many
SELECT b.user_id as owner_id, b.id as bento_id, b.name as bento_name, b.created_at, b.updated_at, p.bytes as user_perms, g.bytes as group_perms FROM bentos b
LEFT JOIN bento_permissions p ON p.bento_id = b.id AND p.user_id = ?1
LEFT JOIN users_groups ug ON  ug.user_id = ?1
LEFT JOIN group_permissions g ON g.bento_id = b.id AND g.group_id = ug.group_id
WHERE b.user_id = ?1
`

type ListBentosWithAccessRow struct {
	OwnerID    string `db:"owner_id" json:"owner_id"`
	BentoID    string `db:"bento_id" json:"bento_id"`
	BentoName  string `db:"bento_name" json:"bento_name"`
	CreatedAt  string `db:"created_at" json:"created_at"`
	UpdatedAt  string `db:"updated_at" json:"updated_at"`
	UserPerms  []byte `db:"user_perms" json:"user_perms"`
	GroupPerms []byte `db:"group_perms" json:"group_perms"`
}

func (q *Queries) ListBentosWithAccess(ctx context.Context, userID string) ([]ListBentosWithAccessRow, error) {
	rows, err := q.db.QueryContext(ctx, listBentosWithAccess, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListBentosWithAccessRow
	for rows.Next() {
		var i ListBentosWithAccessRow
		if err := rows.Scan(
			&i.OwnerID,
			&i.BentoID,
			&i.BentoName,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserPerms,
			&i.GroupPerms,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const newBento = `-- name: NewBento :one
INSERT INTO bentos (user_id, name, created_at, updated_at)
VALUES (?, ?, ?, ?) RETURNING id
`

type NewBentoParams struct {
	UserID    string `db:"user_id" json:"user_id"`
	Name      string `db:"name" json:"name"`
	CreatedAt string `db:"created_at" json:"created_at"`
	UpdatedAt string `db:"updated_at" json:"updated_at"`
}

func (q *Queries) NewBento(ctx context.Context, arg NewBentoParams) (string, error) {
	row := q.db.QueryRowContext(ctx, newBento,
		arg.UserID,
		arg.Name,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}

const removeIngredientFromBento = `-- name: RemoveIngredientFromBento :execrows
DELETE FROM bento_ingredients WHERE bento_id = ? AND id = ?
`

type RemoveIngredientFromBentoParams struct {
	BentoID string `db:"bento_id" json:"bento_id"`
	ID      string `db:"id" json:"id"`
}

func (q *Queries) RemoveIngredientFromBento(ctx context.Context, arg RemoveIngredientFromBentoParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, removeIngredientFromBento, arg.BentoID, arg.ID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const setBentoIngredient = `-- name: SetBentoIngredient :exec
INSERT INTO bento_ingredients (bento_id, name, value, created_at, updated_at)
VALUES (?, ?, ?, ?, ?)
ON CONFLICT DO UPDATE SET
    value = excluded.value,
    updated_at = excluded.updated_at
`

type SetBentoIngredientParams struct {
	BentoID   string `db:"bento_id" json:"bento_id"`
	Name      string `db:"name" json:"name"`
	Value     []byte `db:"value" json:"value"`
	CreatedAt string `db:"created_at" json:"created_at"`
	UpdatedAt string `db:"updated_at" json:"updated_at"`
}

func (q *Queries) SetBentoIngredient(ctx context.Context, arg SetBentoIngredientParams) error {
	_, err := q.db.ExecContext(ctx, setBentoIngredient,
		arg.BentoID,
		arg.Name,
		arg.Value,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}
