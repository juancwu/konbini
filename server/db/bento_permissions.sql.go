// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: bento_permissions.sql

package db

import (
	"context"
)

const getUserIDsWithBentoAccess = `-- name: GetUserIDsWithBentoAccess :many
SELECT user_id, bytes FROM bento_permissions WHERE bento_id = ?
`

type GetUserIDsWithBentoAccessRow struct {
	UserID string `db:"user_id" json:"user_id"`
	Bytes  []byte `db:"bytes" json:"bytes"`
}

func (q *Queries) GetUserIDsWithBentoAccess(ctx context.Context, bentoID string) ([]GetUserIDsWithBentoAccessRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserIDsWithBentoAccess, bentoID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserIDsWithBentoAccessRow
	for rows.Next() {
		var i GetUserIDsWithBentoAccessRow
		if err := rows.Scan(&i.UserID, &i.Bytes); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const newBentoPermission = `-- name: NewBentoPermission :exec
INSERT INTO bento_permissions
(user_id, bento_id, bytes, created_at, updated_at)
VALUES
(?, ?, ?, ?, ?)
`

type NewBentoPermissionParams struct {
	UserID    string `db:"user_id" json:"user_id"`
	BentoID   string `db:"bento_id" json:"bento_id"`
	Bytes     []byte `db:"bytes" json:"bytes"`
	CreatedAt string `db:"created_at" json:"created_at"`
	UpdatedAt string `db:"updated_at" json:"updated_at"`
}

func (q *Queries) NewBentoPermission(ctx context.Context, arg NewBentoPermissionParams) error {
	_, err := q.db.ExecContext(ctx, newBentoPermission,
		arg.UserID,
		arg.BentoID,
		arg.Bytes,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}
