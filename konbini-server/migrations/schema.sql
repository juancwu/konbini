
--
-- LibSQL SQL Schema dump automatic generated by geni
--

CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE schema_migrations (id VARCHAR(255) NOT NULL PRIMARY KEY);
CREATE TABLE users (
    id TEXT NOT NULL PRIMARY KEY DEFAULT (uuid4()),
    email TEXT NOT NULL UNIQUE,
    password BLOB NOT NULL,
    nickname TEXT NOT NULL,
    email_verified BOOL NOT NULL DEFAULT false,
    token_salt BLOB NOT NULL UNIQUE,
    created_at TEXT NOT NULL DEFAULT (datetime('now', 'utc')),
    updated_at TEXT NOT NULL DEFAULT (datetime('now', 'utc'))
);
CREATE TABLE email_tokens (
    id TEXT NOT NULL PRIMARY KEY DEFAULT (uuid4()),
    user_id TEXT NOT NULL UNIQUE,
    token_salt BLOB NOT NULL UNIQUE,
    created_at TEXT NOT NULL DEFAULT (datetime('now', 'utc')),
    updated_at TEXT NOT NULL DEFAULT (datetime('now', 'utc')),
    expires_at TEXT NOT NULL
);
CREATE TABLE sessions (
    token_id TEXT NOT NULL,
    token_salt BLOB NOT NULL UNIQUE,
    user_id TEXT NOT NULL,
    device_name TEXT,
    device_os TEXT,
    device_hostname TEXT,
    ip TEXT,
    location TEXT,
    last_activity TEXT NOT NULL,

    -- define compound pk for sessions since each user should only have one session
    -- per token, if it isn't then there is something fishy going on.
    CONSTRAINT pk_sessions PRIMARY KEY (user_id, token_id)
);
CREATE TABLE groups (
    id TEXT NOT NULL PRIMARY KEY DEFAULT (uuid4()),
    name TEXT NOT NULL,
    owner_id TEXT NOT NULL,
    created_at TEXT NOT NULL DEFAULT (datetime('now', 'utc')),
    updated_at TEXT NOT NULL DEFAULT (datetime('now', 'utc')),

    CONSTRAINT unique_group_name_owner UNIQUE (name, owner_id)
);
CREATE TABLE users_groups (
    user_id TEXT NOT NULL,
    group_id TEXT NOT NULL,
    created_at TEXT NOT NULL DEFAULT (datetime('now', 'utc')),

    CONSTRAINT pk_users_groups PRIMARY KEY (user_id, group_id)
);
CREATE TABLE bentos (
    id TEXT NOT NULL PRIMARY KEY DEFAULT (uuid4()),
    user_id TEXT NOT NULL,
    name TEXT NOT NULL,
    created_at TEXT NOT NULL DEFAULT (datetime('now', 'utc')),
    updated_at TEXT NOT NULL DEFAULT (datetime('now', 'utc')),

    CONSTRAINT unique_bento_name_user UNIQUE (user_id, name)
);
CREATE TABLE bento_ingridients (
    id TEXT NOT NULL PRIMARY KEY DEFAULT (uuid4()),
    bento_id TEXT NOT NULL,
    name TEXT NOT NULL,
    value BLOB NOT NULL,
    created_at TEXT NOT NULL DEFAULT (datetime('now', 'utc')),
    updated_at TEXT NOT NULL DEFAULT (datetime('now', 'utc')),

    CONSTRAINT unique_bento_ingridient_name UNIQUE (bento_id, name)
);
CREATE TABLE bento_permissions (
    user_id TEXT NOT NULL,
    bento_id TEXT NOT NULL,
    -- default to no permissions
    level INTEGER NOT NULL DEFAULT 0,
    created_at TEXT NOT NULL DEFAULT (datetime('now', 'utc')),
    updated_at TEXT NOT NULL DEFAULT (datetime('now', 'utc')),

    CONSTRAINT pk_bento_permissions PRIMARY KEY (user_id, bento_id)
);
CREATE TABLE group_permissions(
    group_id TEXT NOT NULL,
    bento_id TEXT NOT NULL,
    level INTEGER NOT NULL DEFAULT 0,
    created_at TEXT NOT NULL DEFAULT (datetime('now', 'utc')),
    updated_at TEXT NOT NULL DEFAULT (datetime('now', 'utc')),

    CONSTRAINT pk_group_permissions PRIMARY KEY (group_id, bento_id)
);
CREATE TABLE bento_tokens(
    id TEXT NOT NULL PRIMARY KEY DEFAULT (uuid4()),
    bento_id TEXT NOT NULL,
    token_salt BLOB NOT NULL UNIQUE,
    created_by TEXT NOT NULL,
    created_at TEXT NOT NULL DEFAULT (datetime('now', 'utc')),
    last_used_at TEXT,
    expires_at TEXT
);
CREATE TABLE access_logs (
    id TEXT NOT NULL PRIMARY KEY DEFAULT (uuid4()),
    user_id TEXT,
    bento_id TEXT,
    group_id TEXT,
    bento_token_id TEXT,
    action TEXT NOT NULL,
    details JSONB,
    accessed_at TEXT NOT NULL DEFAULT (datetime('now', 'utc'))
);